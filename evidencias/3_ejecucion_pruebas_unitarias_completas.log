PS C:\Users\manue\Documents\AI Programadores\HW_C6_MANUEL_VARGAS\CAP06_CHALLENGE> pytest --cov --cov-report=html:coverage
====================================================================== test session starts =======================================================================
platform win32 -- Python 3.12.4, pytest-8.0.2, pluggy-1.5.0
rootdir: C:\Users\manue\Documents\AI Programadores\HW_C6_MANUEL_VARGAS\CAP06_CHALLENGE
plugins: anyio-4.6.0, cov-6.0.0, mock-3.11.1
collected 162 items

parte1\func_test.py .....................................................................FFF..........                                                      [ 50%]
parte1\reference_test.py ......................................FF                                                                                           [ 75%]
parte1\solucion\solucion_test.py ........................................                                                                                   [100%]

============================================================================ FAILURES ============================================================================ 
____________________________________________________________ test_numeros_extremadamente_grandes[191] ____________________________________________________________ 

num = 191

    @pytest.mark.parametrize("num", [10*18 + 5, 10*18 + 3, 10*18 + 11, 10*18 + 13, 10*18 + 17])
    def test_numeros_extremadamente_grandes(num):
>       assert es_primo(num) == False, f"Error: {num} no debería ser primo"
E       AssertionError: Error: 191 no debería ser primo
E       assert True == False
E        +  where True = es_primo(191)

parte1\func_test.py:83: AssertionError
____________________________________________________________ test_numeros_extremadamente_grandes[193] ____________________________________________________________ 

num = 193

    @pytest.mark.parametrize("num", [10*18 + 5, 10*18 + 3, 10*18 + 11, 10*18 + 13, 10*18 + 17])
    def test_numeros_extremadamente_grandes(num):
>       assert es_primo(num) == False, f"Error: {num} no debería ser primo"
E       AssertionError: Error: 193 no debería ser primo
E       assert True == False
E        +  where True = es_primo(193)

parte1\func_test.py:83: AssertionError
____________________________________________________________ test_numeros_extremadamente_grandes[197] ____________________________________________________________ 

num = 197

    @pytest.mark.parametrize("num", [10*18 + 5, 10*18 + 3, 10*18 + 11, 10*18 + 13, 10*18 + 17])
    def test_numeros_extremadamente_grandes(num):
>       assert es_primo(num) == False, f"Error: {num} no debería ser primo"
E       AssertionError: Error: 197 no debería ser primo
E       assert True == False
E        +  where True = es_primo(197)

parte1\func_test.py:83: AssertionError
______________________________________________________ test_numeros_punto_flotante[19.000000000000004-True] ______________________________________________________ 

num = 19.000000000000004, expected = True

    @pytest.mark.parametrize(
        "num, expected",
        [
            (19.000000000000004, True),
            (23.000000000000004, True),
        ],
    )
    def test_numeros_punto_flotante(num, expected):
>       assert (
            es_primo(num) == expected
        ), f"Error: {num} (punto flotante) falló en devolver {expected}"

parte1\reference_test.py:55:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

num = 19.000000000000004

    def es_primo(num):
        # Verificar si el número es un booleano
        if isinstance(num, bool):
            raise TypeError("El input no debe ser un valor booleano.")

        # Verificar si el número es un flotante (entero o no)
        if isinstance(num, float):
>           raise TypeError("El input debe ser un número entero.")  # Lanzar TypeError para cualquier flotante
E           TypeError: El input debe ser un número entero.

parte1\func.py:16: TypeError
______________________________________________________ test_numeros_punto_flotante[23.000000000000004-True] ______________________________________________________ 

num = 23.000000000000004, expected = True

    @pytest.mark.parametrize(
        "num, expected",
        [
            (19.000000000000004, True),
            (23.000000000000004, True),
        ],
    )
    def test_numeros_punto_flotante(num, expected):
>       assert (
            es_primo(num) == expected
        ), f"Error: {num} (punto flotante) falló en devolver {expected}"

parte1\reference_test.py:55:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  

num = 23.000000000000004

    def es_primo(num):
        # Verificar si el número es un booleano
        if isinstance(num, bool):
            raise TypeError("El input no debe ser un valor booleano.")

        # Verificar si el número es un flotante (entero o no)
        if isinstance(num, float):
>           raise TypeError("El input debe ser un número entero.")  # Lanzar TypeError para cualquier flotante
E           TypeError: El input debe ser un número entero.

parte1\func.py:16: TypeError

---------- coverage: platform win32, python 3.12.4-final-0 -----------
Coverage HTML written to dir coverage

==================================================================== short test summary info ===================================================================== 
FAILED parte1/func_test.py::test_numeros_extremadamente_grandes[191] - AssertionError: Error: 191 no debería ser primo
FAILED parte1/func_test.py::test_numeros_extremadamente_grandes[193] - AssertionError: Error: 193 no debería ser primo
FAILED parte1/func_test.py::test_numeros_extremadamente_grandes[197] - AssertionError: Error: 197 no debería ser primo
FAILED parte1/reference_test.py::test_numeros_punto_flotante[19.000000000000004-True] - TypeError: El input debe ser un número entero.
FAILED parte1/reference_test.py::test_numeros_punto_flotante[23.000000000000004-True] - TypeError: El input debe ser un número entero.
================================================================= 5 failed, 157 passed in 0.87s ==================================================================